-- The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
--
-- 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
--
-- Let us list the factors of the first seven triangle numbers:
--
--  1: 1
--  3: 1,3
--  6: 1,2,3,6
--  10: 1,2,5,10
--  15: 1,3,5,15
--  21: 1,3,7,21
--  28: 1,2,4,7,14,28
--
--  We can see that 28 is the first triangle number to have over five divisors.
--
--  What is the value of the first triangle number to have over five hundred divisors?

import Data.List (group)
import Euler.Algebra (factorize)

-- Rather than going through the number of possible divisors, we instead compute
-- the number based on the factorization of a number. The power of some prime p, lets
-- call it n, represents n possible divisors of a number (p, p*p, p*p*p, ...). Thus if
-- we consider r_1, r_2, ..., r_n powers of primes p_1, p_2, ..., p_n, and also include
-- the possibility of the 0th power of p_i for some 1 <= i <= n, the number of divisors
-- is simply (r_1 + 1) * (r_2 + 1) * ... * (r_n + 1).

main = print . head $ filter (\x -> (divisors x) > 500) (triangle 0 1)
    where triangle a b = let c = a + b in c : triangle c (b + 1)
          divisors n = product $ map (\x -> 1 + length x) (group $ factorize n)
